import re # импортируем модуль для работы с регулярными выражениями

# # Функция для проверки валидности транспортного номера
# def check_number(number):
#     # Регулярное выражение для валидного транспортного номера
#     pattern = r'^[АВЕКМНОРСТУХ]\d{3}[АВЕКМНОРСТУХ]{2}-\d{2,3}$'
#     # Проверяем, соответствует ли строка регулярному выражению
#     match = re.match(pattern, number)
#     if not match:  # если нет совпадения
#         return None # Возвращаем None
#     # Возвращаем номер и регион
#     return number[:-4], number[-3:]

# # Пример использования функции
# number = 'О831ОА-150' # задаем строку с транспортным номером
# result = check_number(number) # вызываем функцию
# if result: # если результат не None
#     print(f'Номер: {result[0]}, регион: {result[1]}') # выводим номер и регион
# else: # если результат None
#     print('Невалидный транспортный номер') # выводим сообщение об ошибке





# Регулярное выражение для валидного e-mail адреса
pattern = r'^[a-zA-Z0-9._-]{4,}@[a-zA-Z0-9.-]{2,}\.[a-zA-Z]{2,4}$'


def check_email(email):
  match = re.match(pattern, email)
  return bool(match)

# Пример использования функции
email = 'mybzis@yandex.ru' # задаем строку с e-mail адресом
result = check_email(email) # вызываем функцию
if result: # если результат True
    print('Валидный e-mail адрес') # выводим сообщение об успехе
else: # если результат False
    print('Невалидный e-mail адрес') # выводим сообщение об ошибке



# pattern = r'\b(\w+)(\W+\1)+\b' # регулярное выражение для удаления повторов слов

# def remove_repeats(string):
#   # Добавляем флаг re.IGNORECASE в функцию re.sub()
#   return re.sub(pattern, r'\1', string, flags=re.IGNORECASE)

# string = 'Идет идет медведь медведь, встретил белку Белку и! упал упал упал!'
# result = remove_repeats(string)
# print(result)



# # Функция для проверки и преобразования номера телефона
# def format_phone_number(number):
#     # Регулярное выражение для валидного номера телефона
#     pattern = r'^(\+?7|8)?[\s\-\+]?(\(?\d{3}\)?|\d{3})[\s\-\+]?(\d{3})[\s\-\+]?(\d{2})[\s\-\+]?(\d{2})$'
#     # Проверяем, соответствует ли строка регулярному выражению
#     match = re.match(pattern, number)
#     if match: # если есть совпадение
#         # Извлекаем группы из регулярного выражения
#         # Группа 1 - код страны (+7 или 8)
#         # Группа 2 - код оператора (в скобках или без)
#         # Группа 3 - первые три цифры номера
#         # Группа 4 - вторые две цифры номера
#         # Группа 5 - последние две цифры номера
#         groups = match.groups()
#         # Преобразуем номер в формат +7(xxx)-xxx-xx-xx
#         # Если код страны отсутствует, добавляем +7
#         # Если код оператора в скобках, убираем скобки
#         formatted_number = f'+7({groups[1].strip("()")})-{groups[2]}-{groups[3]}-{groups[4]}'
#         # Возвращаем отформатированный номер
#         return formatted_number
#     else: # если нет совпадения
#         # Возвращаем None
#         return None

# # Пример использования функции
# number = '89999999999' # задаем строку с номером телефона
# result = format_phone_number(number) # вызываем функцию
# if result: # если результат не None
#     print(f'Валидный номер телефона: {result}') # выводим отформатированный номер
# else: # если результат None
#     print('Невалидный номер телефона') # выводим сообщение об ошибке
