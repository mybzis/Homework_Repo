# Homework 1. TASK 1  (+2.08.23) 


# word = input("Введите ваше слово: ").strip()

# if len(word) % 2 == 0:
#   koeff = len(word) // 2
#   bukvi = word[koeff - 1 : koeff + 1]
#   print(bukvi)
  
# else:
#   koeff = len(word) // 2
#   bukva = word[koeff]
#   print(bukva)
  


# TASK 2


# Мы делаем MVP dating-сервиса, и у нас есть список парней и девушек (их число может варьироваться):

# boys = ['Peter', 'Alex', 'John', 'Arthur', 'Richard']
# girls = ['Kate', 'Liza', 'Kira', 'Emma', 'Trisha']
# Выдвигаем гипотезу: лучшие рекомендации мы получим, если просто отсортируем имена по алфавиту и познакомим людей с одинаковыми индексами после сортировки! "Познакомить" пары нам поможет функция zip, а в цикле распакуем zip-объект и выведем информацию в виде:

# Идеальные пары:
# Alex и Emma
# Arthur и Kate
# John и Kira
# Peter и Liza
# Richard и Trisha
# Внимание! Если количество людей в списках будет не совпадать, то мы никого знакомить не будет и выведем пользователю предупреждение, что кто-то может остаться без пары!

# boys = ['Peter', 'Alex', 'John', 'Arthur', 'Richard']
# girls = ['Kate', 'Liza', 'Kira', 'Emma', 'Trisha']

# if len(boys) != len(girls):
#   print("Кто-то может остаться без пары, списки неравные!")
# else:
#   boys = sorted(boys)
#   girls = sorted(girls)
#   boys_and_girls = zip(boys, girls)
# # print(list(boys_and_girls))
#   for boy, girl in zip(boys, girls):
#     print(f"{boy} и {girl}")


 # TASK 3

# У нас есть список, содержащий информацию о среднедневной температуре в Фаренгейтах за произвольный период по странам (структура данных в примере). Необходимо написать код, который рассчитает среднюю температуру за период в Цельсиях(!) для каждой страны.


# countries_temperature = [
# ["Thailand", [75.2, 77, 78.8, 73.4, 68, 75.2, 77]],
# ["Germany", [57.2, 55.4, 59, 59, 53.6]],
# ["Russia", [35.6, 37.4, 39.2, 41, 42.8, 39.2, 35.6]],
# ["Poland", [50, 50, 53.6, 57.2, 55.4, 55.4, 51.8]]
# ]

# # for country in countries_temperature:
# #   print(country[0], "-",  round((sum(country[1]) / len(country[1]) - 32) / 1.8, 1), "C")


# # Импортируем модуль statistics
# import statistics

# # Создаем функцию для перевода температуры из Фаренгейта в Цельсий
# def fahrenheit_to_celsius(f):
#     return (f - 32) / 1.8

# # Задаем список countries_temperature
# countries_temperature = [
#     ['Таиланд', [75.2, 77, 78.8, 73.4, 68, 75.2, 77]],
#     ['Германия', [57.2, 55.4, 59, 59, 53.6]],
#     ['Россия', [35.6, 37.4, 39.2, 41, 42.8, 39.2, 35.6]],
#     ['Польша', [50, 50, 53.6, 57.2, 55.4, 55.4]]
# ]

# # Выводим заголовок
# print('Средняя температура в странах:')
# print()

# # Проходим по списку countries_temperature
# for country in countries_temperature:
#     # Извлекаем название страны и список температур
#     name = country[0]
#     temps = country[1]
#     # Применяем функцию перевода к каждому элементу списка температур
#     celsius_temps = [fahrenheit_to_celsius(f) for f in temps]
#     # Вычисляем среднее арифметическое из полученных значений в Цельсиях
#     average_temp = statistics.mean(celsius_temps)
#     # Выводим на экран название страны и среднюю температуру с одним знаком после запятой
#     print(f'{name} - {average_temp:.1f} C')




# TASK 4

# Дан поток логов по количеству просмотренных страниц для каждого пользователя. Список отсортирован по ID пользователя.
# Вам необходимо написать алгоритм, который считает среднее значение просмотров на пользователя.
# Т. е. надо посчитать отношение суммы всех просмотров к количеству уникальных пользователей.
# Учтите, что весь список stream не помещается в оперативную память, т. е. его нужно обрабатывать поэлементно в цикле.

# stream = [
# 	'2018-01-01,user1,3',
# 	'2018-01-07,user1,4',
# 	'2018-03-29,user1,1',
# 	'2018-04-04,user1,13',
# 	'2018-01-05,user2,7',
# 	'2018-06-14,user3,4',
# 	'2018-07-02,user3,10',
# 	'2018-03-21,user4,19',
# 	'2018-03-22,user4,4',
# 	'2018-04-22,user4,8',
# 	'2018-05-03,user4,9',
# 	'2018-05-11,user4,11',
# ]

# n_views = 0
# n_users = 0
# last_user = ''

# for s in stream:
#   s = s.split(",")
#   n_views += int(s[2])
#   if s[1] != last_user:
#     n_users += 1
#     last_user = s[1]
  
# avg = n_views / n_users 
# print(avg)


# sys_stdin = [78, 68, 484, 3, 254, 90, 143, 78, 43, 42, 3053, 473, 5, 8593, 16, 3, 1454, 37, 96, 8547]

# min_odding = min([num for num in sys_stdin if num % 2 == 0])

# print(min_odding)

# summa = 0
# while True:
#   chislo = int(input("Введите число: "))
#   summa += chislo
#   if chislo == 0:
#     print(summa)
#     summa = 0


# # Создаем пустой список для хранения чисел
# numbers = []

# # Запускаем бесконечный цикл
# while True:
#   # Запрашиваем у пользователя число
#   value = input("Введите число: ")

#   # Пробуем преобразовать строку в целое число
#   try:
#     number = int(value)
#   # Если не получается, то выводим сообщение об ошибке и просим пользователя ввести число заново
#   except ValueError:
#     print("Вы ввели не целое число:", value)
#     print("Пожалуйста, введите целое число.")
#     # Прерываем цикл
#     break

#   # Пока число не равно нулю
#   while number != 0:
#     # Добавляем число в список
#     numbers.append(number)
#     # Запрашиваем у пользователя следующее число
#     value = input("Введите число: ")

#     # Пробуем преобразовать строку в целое число
#     try:
#       number = int(value)
#     # Если не получается, то выводим сообщение об ошибке и просим пользователя ввести число заново
#     except ValueError:
#       print("Вы ввели не целое число:", value)
#       print("Пожалуйста, введите целое число.")
#       # Прерываем цикл
#       break

#   # Суммируем числа в списке с помощью функции СУММ
#   result = sum(numbers)

#   # Выводим результат на экран
#   print("Результат:", result)

#   # Очищаем список для следующего подсчета
#   numbers.clear()

#   # Спрашиваем у пользователя, хочет ли он продолжить
#   answer = input("Хотите продолжить? (да/нет) ")

#   # Если пользователь не хочет продолжить
#   if answer.lower() == "нет":
#     # Выходим из цикла
#     break


# # TASK 5

# # Импортируем модуль re
# import re

# # Создаем шаблон регулярного выражения для валидации номера с символом $ в конце
# pattern = r'([АВЕКМНОРСТУХ]\d{3}[АВЕКМНОРСТУХ])(\d{2,3})$'

# # Задаем список car_ids
# car_ids = ['А222ВС96', 'АБ22ВВ193']

# # Проходим по списку car_ids
# for car_id in car_ids:
#     # Проверяем номер на соответствие шаблону
#     match = re.match(pattern, car_id)
#     # Если номер валиден
#     if match:
#         # Извлекаем часть без региона и сам регион
#         number = match.group(1)
#         region = match.group(2)
#         # Выводим сообщение о валидности номера и его регионе
#         print(f'Номер {number} валиден. Регион: {region}')
#     # Если номер не валиден
#     else:
#         # Выводим сообщение об этом
#         print(f'Номер {car_id} не валиден')

#It doesnt work